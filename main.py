# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YG2Tidj49MG-iEyyMCcumbiHkWnF726h

# **Daughter (G.O.A.T)**

*Development Environment Keys*
"""

import os
from firebase_admin import initialize_app, credentials, get_app
from constant import OPENAI_API_KEY, OPENWEATHERMAP_API_KEY


os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = "serviceAccount.json"
os.environ['OPENAI_API_KEY'] = OPENAI_API_KEY
os.environ['OPENWEATHERMAP_API_KEY'] = OPENWEATHERMAP_API_KEY

try:
  get_app()
except ValueError:
  credential = credentials.Certificate(os.environ.get('GOOGLE_APPLICATION_CREDENTIALS'))
  initialize_app(credential)

"""*Knowledge Base*"""

knowledge_base = [
    {
        "page": "START_PAGE",
        "data": [
            {
                "intent": "time_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "The time is "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅពេលនេះម៉ោង "
                    }
                }
            },
            {
                "intent": "weather_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "In Phnom Penh, you would feel like "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅភ្នំពេញ អ្នកនឹងមានអារម្មណ៍ថាដូច "
                    }
                }
            },
            {
                "intent": "flight_search",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "from_iata",
                        "chips": [
                            "Cancel",
                            "Chat Me"
                        ],
                        "message": "What is the name of city or airport you would like to take off from?"
                    },
                    "km": {
                        "file": "",
                        "type": "from_iata",
                        "chips": [
                            "បោះបង់",
                            "ឆាតជាមួយខ្ញុំ"
                        ],
                        "message": "តើបងចង់ហោះចេញពីទីក្រុង ឬព្រលានយន្តហោះមួយណាដែរ?"
                    }
                }
            },
            {
                "intent": "chat_me",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "Thank you for letting me know your preference to continue our conversation regarding your flight ticket search on our in-app chat feature. I'm more than happy to assist you there for your convenience."
                    },
                    "km": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "សូមអរគុណបងដែលអោយប្អូនដឹងថា បងចង់ទាក់ទងមកប្អូនវិញ ជំនួសការសួរនាំពីបត។ ភ្នាក់ងារខាងប្អូននឹងបន្តការសន្ទនារបស់យើងទាក់ទងនឹងការស្វែងរកសំបុត្រយន្តហោះ តាមមុខងារជជែកក្នុងកម្មវិធីផ្ទាល់។ ប្អូនរីករាយនឹងនៅទីនេះក្នុងការជួយបងដើម្បីអោយមានភាពងាយស្រួលជាងមុន។"
                    }
                }
            }
        ]
    },
    {
        "page": "FROM_IATA",
        "data": [
            {
                "intent": "time_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "The time is "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅពេលនេះម៉ោង "
                    }
                }
            },
            {
                "intent": "weather_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "In Phnom Penh, you would feel like "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅភ្នំពេញ អ្នកនឹងមានអារម្មណ៍ថាដូច "
                    }
                }
            },
            {
                "intent": "flight_destination",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "to_iata",
                        "chips": [
                            "Cancel",
                            "Chat Me"
                        ],
                        "message": "Please select a city or airport you would like to go:"
                    },
                    "km": {
                        "file": "",
                        "type": "to_iata",
                        "chips": [
                            "បោះបង់",
                            "ឆាតជាមួយខ្ញុំ"
                        ],
                        "message": "សូមបងជ្រើសរើសទីក្រុង ឬព្រលានយន្តហោះដែលបងចង់ទៅ៖"
                    }
                }
            },
            {
                "intent": "cancellation",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "end",
                        "chips": [],
                        "message": "I understand that you've decided to discontinue your flight ticket search with us at this time. I want to thank you for considering our services, and please know that we're here to assist you should you need our help in the future."
                    },
                    "km": {
                        "file": "",
                        "type": "end",
                        "chips": [],
                        "message": "ខ្ញុំដឹងថាបងបានសម្រេចចិត្តបញ្ឈប់ការស្វែងរកសំបុត្រយន្តហោះរបស់បងជាមួយខ្ញុំនៅពេលនេះ ប៉ុន្តែសូមចាំថាខ្ញុំនឹងនៅទីនេះដើម្បីជួយបងស្វែងរកជើងហោះហើរដែលមានតម្លៃសមរម្យ។ សូមអរគុណសម្រាប់ការសាកល្បងសេវាកម្មរបស់ខ្ញុំ។ បងអាចទាក់ទងមកកាន់ខ្ញុំបានគ្រប់ពេលវេលា ប្រសិនបើបងត្រូវការជំនួយរបស់ខ្ញុំនាពេលអនាគត។"
                    }
                }
            },
            {
                "intent": "chat_me",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "Thank you for letting me know your preference to continue our conversation regarding your flight ticket search on our in-app chat feature. I'm more than happy to assist you there for your convenience."
                    },
                    "km": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "សូមអរគុណបងដែលអោយប្អូនដឹងថា បងចង់ទាក់ទងមកប្អូនវិញ ជំនួសការសួរនាំពីបត។ ភ្នាក់ងារខាងប្អូននឹងបន្តការសន្ទនារបស់យើងទាក់ទងនឹងការស្វែងរកសំបុត្រយន្តហោះ តាមមុខងារជជែកក្នុងកម្មវិធីផ្ទាល់។ ប្អូនរីករាយនឹងនៅទីនេះក្នុងការជួយបងដើម្បីអោយមានភាពងាយស្រួលជាងមុន។"
                    }
                }
            }
        ]
    },
    {
        "page": "TO_IATA",
        "data": [
            {
                "intent": "time_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "The time is "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅពេលនេះម៉ោង "
                    }
                }
            },
            {
                "intent": "weather_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "In Phnom Penh, you would feel like "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅភ្នំពេញ អ្នកនឹងមានអារម្មណ៍ថាដូច "
                    }
                }
            },
            {
                "intent": "flight_destination",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "date_departure",
                        "chips": [
                            "Cancel",
                            "Chat Me"
                        ],
                        "message": "Which date would you like to departure?"
                    },
                    "km": {
                        "file": "",
                        "type": "date_departure",
                        "chips": [
                            "បោះបង់",
                            "ឆាតជាមួយខ្ញុំ"
                        ],
                        "message": "តើបងចង់ហោះចេញនៅថ្ងៃណាដែរ?"
                    }
                }
            },
            {
                "intent": "cancellation",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "end",
                        "chips": [],
                        "message": "I understand that you've decided to discontinue your flight ticket search with us at this time. I want to thank you for considering our services, and please know that we're here to assist you should you need our help in the future."
                    },
                    "km": {
                        "file": "",
                        "type": "end",
                        "chips": [],
                        "message": "ខ្ញុំដឹងថាបងបានសម្រេចចិត្តបញ្ឈប់ការស្វែងរកសំបុត្រយន្តហោះរបស់បងជាមួយខ្ញុំនៅពេលនេះ ប៉ុន្តែសូមចាំថាខ្ញុំនឹងនៅទីនេះដើម្បីជួយបងស្វែងរកជើងហោះហើរដែលមានតម្លៃសមរម្យ។ សូមអរគុណសម្រាប់ការសាកល្បងសេវាកម្មរបស់ខ្ញុំ។ បងអាចទាក់ទងមកកាន់ខ្ញុំបានគ្រប់ពេលវេលា ប្រសិនបើបងត្រូវការជំនួយរបស់ខ្ញុំនាពេលអនាគត។"
                    }
                }
            },
            {
                "intent": "chat_me",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "Thank you for letting me know your preference to continue our conversation regarding your flight ticket search on our in-app chat feature. I'm more than happy to assist you there for your convenience."
                    },
                    "km": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "សូមអរគុណបងដែលអោយប្អូនដឹងថា បងចង់ទាក់ទងមកប្អូនវិញ ជំនួសការសួរនាំពីបត។ ភ្នាក់ងារខាងប្អូននឹងបន្តការសន្ទនារបស់យើងទាក់ទងនឹងការស្វែងរកសំបុត្រយន្តហោះ តាមមុខងារជជែកក្នុងកម្មវិធីផ្ទាល់។ ប្អូនរីករាយនឹងនៅទីនេះក្នុងការជួយបងដើម្បីអោយមានភាពងាយស្រួលជាងមុន។"
                    }
                }
            }
        ]
    },
    {
        "page": "DATE_DEPARTURE",
        "data": [
            {
                "intent": "time_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "The time is "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅពេលនេះម៉ោង "
                    }
                }
            },
            {
                "intent": "weather_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "In Phnom Penh, you would feel like "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅភ្នំពេញ អ្នកនឹងមានអារម្មណ៍ថាដូច "
                    }
                }
            },
            {
                "intent": "date_time",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "date_return",
                        "chips": [
                            "Cancel",
                            "One-way",
                            "Chat Me"
                        ],
                        "message": "At which date would you like to return back?"
                    },
                    "km": {
                        "file": "",
                        "type": "date_return",
                        "chips": [
                            "បោះបង់",
                            "មួយទិសដៅ",
                            "ឆាតជាមួយខ្ញុំ"
                        ],
                        "message": "តើបងមានថ្ងៃត្រូវត្រលប់មកវិញដែរទេ? បើមានសូមបងជ្រើសរើស៖"
                    }
                }
            },
            {
                "intent": "cancellation",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "end",
                        "chips": [],
                        "message": "I understand that you've decided to discontinue your flight ticket search with us at this time. I want to thank you for considering our services, and please know that we're here to assist you should you need our help in the future."
                    },
                    "km": {
                        "file": "",
                        "type": "end",
                        "chips": [],
                        "message": "ខ្ញុំដឹងថាបងបានសម្រេចចិត្តបញ្ឈប់ការស្វែងរកសំបុត្រយន្តហោះរបស់បងជាមួយខ្ញុំនៅពេលនេះ ប៉ុន្តែសូមចាំថាខ្ញុំនឹងនៅទីនេះដើម្បីជួយបងស្វែងរកជើងហោះហើរដែលមានតម្លៃសមរម្យ។ សូមអរគុណសម្រាប់ការសាកល្បងសេវាកម្មរបស់ខ្ញុំ។ បងអាចទាក់ទងមកកាន់ខ្ញុំបានគ្រប់ពេលវេលា ប្រសិនបើបងត្រូវការជំនួយរបស់ខ្ញុំនាពេលអនាគត។"
                    }
                }
            },
            {
                "intent": "chat_me",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "Thank you for letting me know your preference to continue our conversation regarding your flight ticket search on our in-app chat feature. I'm more than happy to assist you there for your convenience."
                    },
                    "km": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "សូមអរគុណបងដែលអោយប្អូនដឹងថា បងចង់ទាក់ទងមកប្អូនវិញ ជំនួសការសួរនាំពីបត។ ភ្នាក់ងារខាងប្អូននឹងបន្តការសន្ទនារបស់យើងទាក់ទងនឹងការស្វែងរកសំបុត្រយន្តហោះ តាមមុខងារជជែកក្នុងកម្មវិធីផ្ទាល់។ ប្អូនរីករាយនឹងនៅទីនេះក្នុងការជួយបងដើម្បីអោយមានភាពងាយស្រួលជាងមុន។"
                    }
                }
            }
        ]
    },
    {
        "page": "DATE_RETURN",
        "data": [
            {
                "intent": "time_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "The time is "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅពេលនេះម៉ោង "
                    }
                }
            },
            {
                "intent": "weather_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "In Phnom Penh, you would feel like "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅភ្នំពេញ អ្នកនឹងមានអារម្មណ៍ថាដូច "
                    }
                }
            },
            {
                "intent": "date_time_or_null",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "adults_infants",
                        "chips": [
                            "Cancel",
                            "Chat Me"
                        ],
                        "message": "May I know how many people will be in this flight?"
                    },
                    "km": {
                        "file": "",
                        "type": "adults_infants",
                        "chips": [
                            "បោះបង់",
                            "ឆាតជាមួយខ្ញុំ"
                        ],
                        "message": "តើប្អូនអាចដឹងពីចំនួនមនុស្សធំ ឬកូនក្មេងដែលត្រូវធ្វើដំណើរបានទេ?"
                    }
                }
            },
            {
                "intent": "one_way",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "adults_infants",
                        "chips": [
                            "Cancel",
                            "Chat Me"
                        ],
                        "message": "May I know how many people will be in this flight?"
                    },
                    "km": {
                        "file": "",
                        "type": "adults_infants",
                        "chips": [
                            "បោះបង់",
                            "ឆាតជាមួយខ្ញុំ"
                        ],
                        "message": "តើប្អូនអាចដឹងពីចំនួនមនុស្សធំ ឬកូនក្មេងដែលត្រូវធ្វើដំណើរបានទេ?"
                    }
                }
            },
            {
                "intent": "cancellation",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "end",
                        "chips": [],
                        "message": "I understand that you've decided to discontinue your flight ticket search with us at this time. I want to thank you for considering our services, and please know that we're here to assist you should you need our help in the future."
                    },
                    "km": {
                        "file": "",
                        "type": "end",
                        "chips": [],
                        "message": "ខ្ញុំដឹងថាបងបានសម្រេចចិត្តបញ្ឈប់ការស្វែងរកសំបុត្រយន្តហោះរបស់បងជាមួយខ្ញុំនៅពេលនេះ ប៉ុន្តែសូមចាំថាខ្ញុំនឹងនៅទីនេះដើម្បីជួយបងស្វែងរកជើងហោះហើរដែលមានតម្លៃសមរម្យ។ សូមអរគុណសម្រាប់ការសាកល្បងសេវាកម្មរបស់ខ្ញុំ។ បងអាចទាក់ទងមកកាន់ខ្ញុំបានគ្រប់ពេលវេលា ប្រសិនបើបងត្រូវការជំនួយរបស់ខ្ញុំនាពេលអនាគត។"
                    }
                }
            },
            {
                "intent": "chat_me",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "Thank you for letting me know your preference to continue our conversation regarding your flight ticket search on our in-app chat feature. I'm more than happy to assist you there for your convenience."
                    },
                    "km": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "សូមអរគុណបងដែលអោយប្អូនដឹងថា បងចង់ទាក់ទងមកប្អូនវិញ ជំនួសការសួរនាំពីបត។ ភ្នាក់ងារខាងប្អូននឹងបន្តការសន្ទនារបស់យើងទាក់ទងនឹងការស្វែងរកសំបុត្រយន្តហោះ តាមមុខងារជជែកក្នុងកម្មវិធីផ្ទាល់។ ប្អូនរីករាយនឹងនៅទីនេះក្នុងការជួយបងដើម្បីអោយមានភាពងាយស្រួលជាងមុន។"
                    }
                }
            }
        ]
    },
    {
        "page": "ADULTS_INFANTS",
        "data": [
            {
                "intent": "time_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "The time is "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅពេលនេះម៉ោង "
                    }
                }
            },
            {
                "intent": "weather_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "In Phnom Penh, you would feel like "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅភ្នំពេញ អ្នកនឹងមានអារម្មណ៍ថាដូច "
                    }
                }
            },
            {
                "intent": "adults_or_infants",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "summary",
                        "chips": [
                            "Modify",
                            "Confirm",
                            "Cancel",
                            "Chat Me"
                        ],
                        "message": "Thank you for your information. Please kindly check if I receive all of your details correctly."
                    },
                    "km": {
                        "file": "",
                        "type": "summary",
                        "chips": [
                            "កែសម្រួល",
                            "ត្រឹមត្រូវ",
                            "បោះបង់",
                            "ឆាតជាមួយខ្ញុំ"
                        ],
                        "message": "សូមអរគុណនូវពត៌មានដែលបងបានប្រាប់មកប្អូន។ សូមមេត្តាបងពិនិត្យមើលពត៌មានខាងក្រោមថាតើ ពត៌មានទាំងអស់ត្រឹមត្រូវដែរឬទេ៖"
                    }
                }
            },
            {
                "intent": "cancellation",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "end",
                        "chips": [],
                        "message": "I understand that you've decided to discontinue your flight ticket search with us at this time. I want to thank you for considering our services, and please know that we're here to assist you should you need our help in the future."
                    },
                    "km": {
                        "file": "",
                        "type": "end",
                        "chips": [],
                        "message": "ខ្ញុំដឹងថាបងបានសម្រេចចិត្តបញ្ឈប់ការស្វែងរកសំបុត្រយន្តហោះរបស់បងជាមួយខ្ញុំនៅពេលនេះ ប៉ុន្តែសូមចាំថាខ្ញុំនឹងនៅទីនេះដើម្បីជួយបងស្វែងរកជើងហោះហើរដែលមានតម្លៃសមរម្យ។ សូមអរគុណសម្រាប់ការសាកល្បងសេវាកម្មរបស់ខ្ញុំ។ បងអាចទាក់ទងមកកាន់ខ្ញុំបានគ្រប់ពេលវេលា ប្រសិនបើបងត្រូវការជំនួយរបស់ខ្ញុំនាពេលអនាគត។"
                    }
                }
            },
            {
                "intent": "chat_me",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "Thank you for letting me know your preference to continue our conversation regarding your flight ticket search on our in-app chat feature. I'm more than happy to assist you there for your convenience."
                    },
                    "km": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "សូមអរគុណបងដែលអោយប្អូនដឹងថា បងចង់ទាក់ទងមកប្អូនវិញ ជំនួសការសួរនាំពីបត។ ភ្នាក់ងារខាងប្អូននឹងបន្តការសន្ទនារបស់យើងទាក់ទងនឹងការស្វែងរកសំបុត្រយន្តហោះ តាមមុខងារជជែកក្នុងកម្មវិធីផ្ទាល់។ ប្អូនរីករាយនឹងនៅទីនេះក្នុងការជួយបងដើម្បីអោយមានភាពងាយស្រួលជាងមុន។"
                    }
                }
            }
        ]
    },
    {
        "page": "CONFIRM_OR_EDIT",
        "data": [
            {
                "intent": "time_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "The time is "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅពេលនេះម៉ោង "
                    }
                }
            },
            {
                "intent": "weather_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "In Phnom Penh, you would feel like "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅភ្នំពេញ អ្នកនឹងមានអារម្មណ៍ថាដូច "
                    }
                }
            },
            {
                "intent": "modify",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "edit",
                        "chips": [
                            "Cancel",
                            "Chat Me"
                        ],
                        "message": "Which piece of information would you like to change?"
                    },
                    "km": {
                        "file": "",
                        "type": "edit",
                        "chips": [
                            "បោះបង់",
                            "ឆាតជាមួយខ្ញុំ"
                        ],
                        "message": "តើពត៌មានមួយណាដែរ ដែលបងចង់កែសម្រួល?"
                    }
                }
            },
            {
                "intent": "confirmation",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "success",
                        "chips": [],
                        "message": "Our team is searching for your ticket right now. You can expect to receive a follow-up with the best available flight options shortly.\n\nThank you for choosing our services. I look forward to assisting you with your next travel plans."
                    },
                    "km": {
                        "file": "",
                        "type": "success",
                        "chips": [],
                        "message": "ក្រុមការងាររបស់ប្អូនកំពុងតែស្វែងរកសំបុត្ររបស់បងឥឡូវនេះ។ ខាងប្អូននឹងទាក់ទងទៅបងតាមមុខងារជជែកនៅក្នុងអ៊ែបនេះក្នុងពេលឆាប់ៗនេះ ជាមួយនឹងជម្រើសជើងហោះហើរដ៏ល្អបំផុត។ \n\nសូមអរគុណសម្រាប់ការជ្រើសរើសសេវាកម្មរបស់ប្អូន។ ប្អូនក៍នឹងនៅទីនេះដើម្បីជួយបងក្នុងការស្វែងរកជើងហោះហើរបន្ទាប់ទៀតនៅពេលលើកក្រោយដូចគ្នា។"
                    }
                }
            },
            {
                "intent": "cancellation",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "cancel",
                        "chips": [],
                        "message": "Thank you for considering our services for your flight ticket search. I understand that you've decided not to proceed further at this time, even after providing all the necessary details. I respect your decision and want to assure you that your information will be handled with confidentiality."
                    },
                    "km": {
                        "file": "",
                        "type": "cancel",
                        "chips": [],
                        "message": "សូមអរគុណចំពោះការសាកល្បងបតសម្រាប់ការស្វែងរកសំបុត្រយន្តហោះមួយនេះ។ ប្អូនគោរពការសម្រេចចិត្តរបស់បងដែលមិនចង់បន្តបន្ទាប់ពីបានផ្តល់ពត៌មានលម្អិតរួចរាល់ហើយ។ តែកុំបារម្ភ ប្អូននឹងធានាថារាល់ពត៌មានរបស់បងដែត្រូវបានរក្សាជាសម្ងាត់។"
                    }
                }
            },
            {
                "intent": "chat_me",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "Thank you for letting me know your preference to continue our conversation regarding your flight ticket search on our in-app chat feature. I'm more than happy to assist you there for your convenience."
                    },
                    "km": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "សូមអរគុណបងដែលអោយប្អូនដឹងថា បងចង់ទាក់ទងមកប្អូនវិញ ជំនួសការសួរនាំពីបត។ ភ្នាក់ងារខាងប្អូននឹងបន្តការសន្ទនារបស់យើងទាក់ទងនឹងការស្វែងរកសំបុត្រយន្តហោះ តាមមុខងារជជែកក្នុងកម្មវិធីផ្ទាល់។ ប្អូនរីករាយនឹងនៅទីនេះក្នុងការជួយបងដើម្បីអោយមានភាពងាយស្រួលជាងមុន។"
                    }
                }
            }
        ]
    },
    {
        "page": "MAKE_CHANGE",
        "data": [
            {
                "intent": "time_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "The time is "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅពេលនេះម៉ោង "
                    }
                }
            },
            {
                "intent": "weather_now",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "In Phnom Penh, you would feel like "
                    },
                    "km": {
                        "file": "",
                        "type": "",
                        "chips": [],
                        "message": "នៅភ្នំពេញ អ្នកនឹងមានអារម្មណ៍ថាដូច "
                    }
                }
            },
            {
                "intent": "cancellation",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "cancel",
                        "chips": [],
                        "message": "Thank you for considering our services for your flight ticket search. I understand that you've decided not to proceed further at this time, even after providing all the necessary details. I respect your decision and want to assure you that your information will be handled with confidentiality."
                    },
                    "km": {
                        "file": "",
                        "type": "cancel",
                        "chips": [],
                        "message": "សូមអរគុណចំពោះការសាកល្បងបតសម្រាប់ការស្វែងរកសំបុត្រយន្តហោះមួយនេះ។ ប្អូនគោរពការសម្រេចចិត្តរបស់បងដែលមិនចង់បន្តបន្ទាប់ពីបានផ្តល់ពត៌មានលម្អិតរួចរាល់ហើយ។ តែកុំបារម្ភ ប្អូននឹងធានាថារាល់ពត៌មានរបស់បងដែត្រូវបានរក្សាជាសម្ងាត់។"
                    }
                }
            },
            {
                "intent": "chat_me",
                "responses": {
                    "en": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "Thank you for letting me know your preference to continue our conversation regarding your flight ticket search on our in-app chat feature. I'm more than happy to assist you there for your convenience."
                    },
                    "km": {
                        "file": "",
                        "type": "chat_me",
                        "chips": [],
                        "message": "សូមអរគុណបងដែលអោយប្អូនដឹងថា បងចង់ទាក់ទងមកប្អូនវិញ ជំនួសការសួរនាំពីបត។ ភ្នាក់ងារខាងប្អូននឹងបន្តការសន្ទនារបស់យើងទាក់ទងនឹងការស្វែងរកសំបុត្រយន្តហោះ តាមមុខងារជជែកក្នុងកម្មវិធីផ្ទាល់។ ប្អូនរីករាយនឹងនៅទីនេះក្នុងការជួយបងដើម្បីអោយមានភាពងាយស្រួលជាងមុន។"
                    }
                }
            }
        ]
    }
]

"""# User's Session (Firestore)"""

from typing import Optional
from datetime import datetime
from firebase_admin import firestore
from constant import CONVERSATION_COL


class SessionService:
  def __init__(self, session_id: str):
    print("=================================== Initialize  Session ===================================")
    self.session_id = session_id
    self.firestore_service = firestore.client()
    print("===========================================================================================")

  def add_session(self):
    print("======================================= Add Session =======================================")
    self.firestore_service.collection(CONVERSATION_COL).document('_').collection(self.session_id).add({
        "dateTime": datetime.now().timestamp() * 1e6 + datetime.now().microsecond,
        "currentPageName": "START_PAGE",
        "parameters": {}
    })
    print("===========================================================================================")

  async def update_session(self, current_page_name: str, parameters: Optional[dict]=None):
    print("===================================== Update  Session =====================================")
    self.firestore_service.collection(CONVERSATION_COL).document('_').collection(self.session_id).add({
        "dateTime": datetime.now().timestamp() * 1e6 + datetime.now().microsecond,
        "currentPageName": current_page_name,
        "parameters": parameters if parameters else {}
    })
    print("===========================================================================================")

  async def get_session(self, new_session_id: str=None) -> Optional[dict]:
    if new_session_id:
      return self.firestore_service.collection(CONVERSATION_COL).document('_').collection(new_session_id).order_by(u'dateTime', direction=firestore.Query.DESCENDING).limit(1).get()

    try:
      return self.firestore_service.collection(CONVERSATION_COL).document('_').collection(self.session_id).order_by(u'dateTime', direction=firestore.Query.DESCENDING).limit(1).get()
    except Exception as error:
      print("Get Session Error:", error)

    return None

"""# Helper Service"""

import re

from datetime import timezone, timedelta, datetime
from dateutil import parser


class HelperService:
  def __init__(self):
    print("==================================== Initialize Helper ====================================")
    self.indexing_dict = {}
    for entry in knowledge_base:
      page = entry['page']
      for data_entry in entry['data']:
        intent = data_entry['intent']
        for lang, say in data_entry['responses'].items():
          self.indexing_dict[(page, intent, lang)] = say
    print("===========================================================================================")

  @staticmethod
  def get_categories(page_name: str) -> list[str]:
    if page_name == 'START_PAGE':
      return ['flight_search', 'chat_me']
    elif page_name == 'FROM_IATA' or page_name == 'TO_IATA':
      return ['flight_destination', 'cancellation', 'chat_me']
    elif page_name == 'DATE_DEPARTURE':
      return ['date_time', 'cancellation', 'chat_me']
    elif page_name == 'DATE_RETURN':
      return ['date_time_or_null', 'cancellation', 'one_way', 'chat_me']
    elif page_name == 'ADULTS_INFANTS':
      return ['adults_or_infants', 'cancellation', 'chat_me']
    elif page_name == 'CONFIRM_OR_EDIT':
      return ['modify', 'confirmation', 'cancellation', 'chat_me']
    elif page_name == 'MAKE_CHANGE':
      return ['cancellation', 'chat_me', 'everything', 'departure_origin', 'arrival_destination', 'departure_date', 'return_date', 'travelers']

    return []

  def _inference(self, page: str, intent: str, language_code: str) -> dict:
    print("Get Page:", page, "Intent:", intent, "Language:", language_code)

    no_matach_response: dict = {
        "file": "",
        "type": "",
        "chips": [],
        "message": "Sorry, I cannot response to this question."
    } if language_code == 'en' else {
        "file": "",
        "type": "",
        "chips": [],
        "message": "សូមអភ័យទោស! ខ្ញុំមិនអាចឆ្លើយនូវសំណួរនេះបានទេ។"
    }

    try:
      return self.indexing_dict.get((page, intent, language_code), no_matach_response)
    except Exception as error:
      print("Inference Error:", error)

      return no_matach_response

  @staticmethod
  def _km_typo_correction(text: str) -> str:
    typo_list = ["ង៉ៃ", "ងៃ", "ថ្ងៃ", "ថ្", "ទី"]
    for typo in typo_list:
      text = re.sub(typo, " ", text)

    return text

  @staticmethod
  def _km_number_normalization(text: str) -> str:
    km_number_list = {'០': '0', '១': '1', '២': '2', '៣': '3', '៤': '4', '៥': '5', '៦': '6', '៧': '7', '៨': '8', '៩': '9'}

    return ''.join(km_number_list.get(number, number) for number in text)

  @staticmethod
  def _km_amber_month_normalization(text: str) -> str:
    km_amber_month_list = {'មករា': '1', 'កុម្ភៈ': '2', 'កុម្ភ៖': '2', 'កុម្ភ:': '2', 'មីនា': '3', 'មិនា': '3', 'មេសា': '4', 'ឧសភា': '5', 'មិថុនា': '6', 'កក្កដា': '7', 'សីហា': '8', 'កញ្ញា': '9', 'តុលា': '10', 'វិច្ឆិកា': '11', 'ធ្នូ': '12'}

    def replace_match(amber_match):
      return km_amber_month_list[amber_match.group(0)]

    month_pattern = re.compile('|'.join(re.escape(key) for key in km_amber_month_list.keys()))

    return month_pattern.sub(replace_match, text)

  def _km_extract_date_time(self, message: str) -> Optional[datetime]:
    message = self._km_typo_correction(message)
    message = self._km_number_normalization(message)
    message = self._km_amber_month_normalization(message)

    day_month_pattern = r"(\d+)\s*ខែ\s*(\d+)|ខែ(\d+)\s*(\d+)"
    day_month_match = re.search(day_month_pattern, message, re.IGNORECASE)
    if day_month_match:
      day, month = datetime.now().day, datetime.now().month
      if day_month_match.group(1) and day_month_match.group(2):
        day, month = day_month_match.group(1), day_month_match.group(2)
      elif day_month_match.group(3) and day_month_match.group(4):
        month, day = day_month_match.group(3), day_month_match.group(4)

      try:
        return parser.parse('{0} {1}'.format(day, month), dayfirst=True)
      except Exception as error:
        print("Parse DayMonth Error:", error)

    return None

  @staticmethod
  def _en_number_of_travelers(message: str) -> Optional[dict]:
    adults_pattern = r"(?:adults? (\d+)|(\d+) adults?)"
    infants_pattern = r"(?:infants?|kids? (\d+)|(\d+) (infants?|kids?))"
    people_pattern = r"(\d+) people"

    adults = 0
    infants = 0

    # Search for matches
    adults_match = re.search(adults_pattern, message, re.IGNORECASE)
    infants_match = re.search(infants_pattern, message, re.IGNORECASE)
    people_match = re.search(people_pattern, message, re.IGNORECASE)

    if adults_match:
      adults = int(adults_match.group(1) if adults_match.group(1) else adults_match.group(2))
    if infants_match:
      infants = int(infants_match.group(1) if infants_match.group(1) else infants_match.group(2))

    if people_match:
      people_count = int(people_match.group(1))
      if not adults_match and not infants_match:
          adults = people_count
    if adults == 0 and infants == 0:
      return None

    return {"adults": adults, "infants": infants}

  def _km_number_of_travelers(self, message: str) -> dict:
    message = self._km_number_normalization(message)
    people = {"adults": 0, "infants": 0}
    _km_people_list = {'នាក់': 'adults', 'មនុស្សធំ': 'adults', 'កូនក្មេង': 'infants', 'ក្មេង': 'infants'}
    people_pattern = re.compile(r"(\d+)\s*(នាក់|មនុស្សធំ|កូនក្មេង|ក្មេង)|(នាក់|មនុស្សធំ|កូនក្មេង|ក្មេង)\s*(\d+)")
    people_matches = people_pattern.finditer(message)

    for people_matche in people_matches:
      number = people_matche.group(1) or people_matche.group(4)
      keyword = people_matche.group(2) or people_matche.group(3)
      category = _km_people_list[keyword]
      if number:
        people[category] += int(number)

    return people

  def _parameter_recognition(self, intent: str, current_page_name: str, message: str) -> dict:
    if current_page_name == 'FROM_IATA' and intent == 'flight_destination':
      return {"from": message}

    elif current_page_name == 'TO_IATA' and intent == 'flight_destination':
      return {"to": message}

    elif current_page_name == 'DATE_DEPARTURE' and intent == 'date_time':
      try:
        date_time = parser.parse(message)
        return {"departureOn": {"day": date_time.day, "month": date_time.month, "year": date_time.year}}
      except Exception as error:
        print("DATE_DEPARTURE Params Error:", error)
        print("Try Extracting with RegExp...")
        date_time = self._km_extract_date_time(message=message)
        if date_time:
          return {"departureOn": {"day": date_time.day, "month": date_time.month, "year": date_time.year}}

      return {"departureOn": None}

    elif current_page_name == 'DATE_RETURN':
      if intent == 'date_time_or_null':
        try:
          date_time = parser.parse(message)
          return {"returnOn": {"day": date_time.day, "month": date_time.month, "year": date_time.year}}
        except Exception as error:
          print("DATE_RETURN Params Error:", error)
          print("Try Extracting with RegExp...")
          date_time = self._km_extract_date_time(message=message)
          if date_time:
            return {"returnOn": {"day": date_time.day, "month": date_time.month, "year": date_time.year}}
      elif intent == 'one_way':
        return {"returnOn": "ONE_WAY"}

      return {"returnOn": None}

    elif current_page_name == 'ADULTS_INFANTS' and intent == 'adults_or_infants':
      people = self._en_number_of_travelers(message=message)
      if people:
        return {"people": people}
      else:
        print("Try Extracting with RegExp...")
        people = self._km_number_of_travelers(message=message)
        return {"people": people}

    return {}

  def intent_recognition(self, current_page_name: str, user_intent: tuple, message: str, parameters: dict) -> tuple:
    (intent, x) = user_intent
    language_code = x
    if current_page_name == 'MAKE_CHANGE':
      if intent == 'everything':
        return ('reroute', ({}, language_code, "START_PAGE", "flight_search"))
      elif intent == 'departure_origin':
        parameters['from'] = None
        return ('reroute', (parameters, language_code, "START_PAGE", "flight_search"))
      elif intent == 'arrival_destination':
        parameters['to'] = None
        return ('reroute', (parameters, language_code, "FROM_IATA", "flight_destination"))
      elif intent == 'departure_date':
        parameters['departureOn'] = None
        return ('reroute', (parameters, language_code, "TO_IATA", "flight_destination"))
      elif intent == 'return_date':
        parameters['returnOn'] = None
        return ('reroute', (parameters, language_code, "DATE_DEPARTURE", "date_time"))
      elif intent == 'travelers':
        parameters['people'] = None
        return ('reroute', (parameters, language_code, "DATE_RETURN", "date_time_or_null"))

    if intent == 'flight_destination':
      parameter: dict = self._parameter_recognition(intent=intent, current_page_name=current_page_name, message=message)
      parameters = {**parameters, **parameter}
      return ('parameter_recognition', (parameters, language_code, current_page_name, intent))

    elif intent == 'date_time':
      parameter: dict = self._parameter_recognition(intent=intent, current_page_name=current_page_name, message=message)
      parameters = {**parameters, **parameter}
      return ('parameter_recognition', (parameters, language_code, current_page_name, intent))

    elif intent == 'date_time_or_null' or intent == 'one_way':
      parameter: dict = self._parameter_recognition(intent=intent, current_page_name=current_page_name, message=message)
      parameters = {**parameters, **parameter}
      return ('parameter_recognition', (parameters, language_code, current_page_name, intent))

    elif intent == 'adults_or_infants':
      parameter: dict = self._parameter_recognition(intent=intent, current_page_name=current_page_name, message=message)
      parameters = {**parameters, **parameter}
      return ('parameter_recognition', (parameters, language_code, current_page_name, intent))

    elif intent == 'generated_response':
      (language_code, generated_response) = x
      return (intent, (parameters, language_code, generated_response))

    return (intent, (parameters, language_code))

  @staticmethod
  def _direct_or_redirect_page(current_page_name: str, intent: str, parameters: Optional[dict]=None) -> str:
    indexing_page = (current_page_name, intent)
    current_page = current_page_name
    if current_page == 'FROM_IATA' and parameters and parameters.get('from'):
      indexing_page = ('FROM_IATA', 'flight_destination')
      current_page = 'TO_IATA'

    if current_page == 'TO_IATA' and parameters and parameters.get('to'):
      indexing_page = ('TO_IATA', 'flight_destination')
      current_page = 'DATE_DEPARTURE'

    if current_page == 'DATE_DEPARTURE' and parameters and parameters.get('departureOn'):
      indexing_page = ('DATE_DEPARTURE', 'date_time')
      current_page = 'DATE_RETURN'

    if current_page == 'DATE_RETURN' and parameters and parameters.get('returnOn'):
      indexing_page = ('DATE_RETURN', 'date_time_or_null')
      current_page = 'ADULTS_INFANTS'

    if current_page == 'ADULTS_INFANTS' and parameters and parameters.get('people'):
      indexing_page = ('ADULTS_INFANTS', 'adults_or_infants')
      current_page = 'CONFIRM_OR_EDIT'

    return indexing_page

  def response(self, current_page_name: str, user_intent: tuple) -> dict:
    (intent, x) = user_intent
    parameters: dict = {}
    repeating_message: str = ''
    last_message = None
    if intent == 'generated_response':
      (parameters, language_code, message) = x
      if current_page_name != 'START_PAGE':
        repeating_message = '\nI would love to know your response to the previous question.' if language_code == 'en' else '\nប្អូនរីករាយនឹងរងចាំចម្លើយរបស់បងទៅលើសំណួរមុននេះ។'
        if current_page_name == 'FROM_IATA':
          last_message = self.indexing_dict.get(('START_PAGE', 'flight_search', language_code), {})
        elif current_page_name == 'TO_IATA':
          last_message = self.indexing_dict.get(('FROM_IATA', 'flight_destination', language_code), {})
        elif current_page_name == 'DATE_DEPARTURE':
          last_message = self.indexing_dict.get(('TO_IATA', 'flight_destination', language_code), {})
        elif current_page_name == 'DATE_RETURN':
          last_message = self.indexing_dict.get(('DATE_DEPARTURE', 'date_time', language_code), {})
        elif current_page_name == 'ADULTS_INFANTS':
          last_message = self.indexing_dict.get(('DATE_RETURN', 'date_time_or_null', language_code), {})
        elif current_page_name == 'CONFIRM_OR_EDIT':
          last_message = self.indexing_dict.get(('ADULTS_INFANTS', 'adults_or_infants', language_code), {})
        elif current_page_name == 'MAKE_CHANGE':
          last_message = self.indexing_dict.get(('CONFIRM_OR_EDIT', 'modify', language_code), {})

      response_message = message + ('\n' + repeating_message + '\n{0}'.format(last_message['message']) if last_message else '')

      return {
          "currentPageName": "GENERATED_RESPONSE",
          "file": "",
          "type": "",
          "chips": [],
          "message": response_message
      }
    elif intent == 'reroute':
      (parameters, language_code, current_page_name, intent) = x
    elif intent == 'parameter_recognition':
      (parameters, language_code, current_page_name, intent) = x
    else:
      (parameters, language_code) = x

    (current_page_name, intent) = self._direct_or_redirect_page(current_page_name=current_page_name, intent=intent, parameters=parameters)
    response = self._inference(page=current_page_name, intent=intent, language_code=language_code)

    if parameters:
      response['parameters'] = parameters
    response['currentPageName'] = current_page_name
    if intent == 'time_now':
      date_time = datetime.now(tz=timezone(timedelta(hours=7)))
      if current_page_name != 'START_PAGE':
        repeating_message = '\nI would love to know your response to the previous question.' if language_code == 'en' else '\nប្អូនរីករាយនឹងរងចាំចម្លើយរបស់បងទៅលើសំណួរមុននេះ។'
        if current_page_name == 'FROM_IATA':
          last_message = self.indexing_dict.get(('START_PAGE', 'flight_search', language_code), {})
        elif current_page_name == 'TO_IATA':
          last_message = self.indexing_dict.get(('FROM_IATA', 'flight_destination', language_code), {})
        elif current_page_name == 'DATE_DEPARTURE':
          last_message = self.indexing_dict.get(('TO_IATA', 'flight_destination', language_code), {})
        elif current_page_name == 'DATE_RETURN':
          last_message = self.indexing_dict.get(('DATE_DEPARTURE', 'date_time', language_code), {})
        elif current_page_name == 'ADULTS_INFANTS':
          last_message = self.indexing_dict.get(('DATE_RETURN', 'date_time_or_null', language_code), {})
        elif current_page_name == 'CONFIRM_OR_EDIT':
          last_message = self.indexing_dict.get(('ADULTS_INFANTS', 'adults_or_infants', language_code), {})
        elif current_page_name == 'MAKE_CHANGE':
          last_message = self.indexing_dict.get(('CONFIRM_OR_EDIT', 'modify', language_code), {})

      response['message'] = response['message'] + date_time.strftime('%-I:%M:%S %p.') + ('\n' + repeating_message + '\n{0}'.format(last_message['message']) if last_message else '')
    elif intent == 'weather_now':
      if current_page_name != 'START_PAGE':
        repeating_message = '\nI would love to know your response to the previous question.' if language_code == 'en' else '\nប្អូនរីករាយនឹងរងចាំចម្លើយរបស់បងទៅលើសំណួរមុននេះ។'
        if current_page_name == 'FROM_IATA':
          last_message = self.indexing_dict.get(('START_PAGE', 'flight_search', language_code), {})
        elif current_page_name == 'TO_IATA':
          last_message = self.indexing_dict.get(('FROM_IATA', 'flight_destination', language_code), {})
        elif current_page_name == 'DATE_DEPARTURE':
          last_message = self.indexing_dict.get(('TO_IATA', 'flight_destination', language_code), {})
        elif current_page_name == 'DATE_RETURN':
          last_message = self.indexing_dict.get(('DATE_DEPARTURE', 'date_time', language_code), {})
        elif current_page_name == 'ADULTS_INFANTS':
          last_message = self.indexing_dict.get(('DATE_RETURN', 'date_time_or_null', language_code), {})
        elif current_page_name == 'CONFIRM_OR_EDIT':
          last_message = self.indexing_dict.get(('ADULTS_INFANTS', 'adults_or_infants', language_code), {})
        elif current_page_name == 'MAKE_CHANGE':
          last_message = self.indexing_dict.get(('CONFIRM_OR_EDIT', 'modify', language_code), {})

      try:
        request_url = "https://api.openweathermap.org/data/2.5/forecast?lat=11.5563738&lon=104.9282099&appid={0}&units=metric".format(os.environ.get('OPENWEATHERMAP_API_KEY'))
        response_json = requests.get(request_url).json()
        temperature = response_json['list'][0]['main']['feels_like']
        response['message'] = response['message'] + str(temperature) + '°C.' + ('\n' + repeating_message + '\n{0}'.format(last_message['message']) if last_message else '')
      except Exception as error:
        print("OWM Error:", error)
        response['message'] = ('I have some internal issues right now. Talk to you later.' if language_code == 'en' else 'ខ្ញុំមានបញ្ហាខ្លះដែលមិនអាចចាប់សីតុណ្ហភាពបាន។ សូមរងចាំបន្តិច ខ្ញុំនឹងរកចម្លើយឲ្យអ្នកបន្តិចទៀត។') + ('\n' + repeating_message + '\n{0}'.format(last_message['message']) if last_message else '')

    return response

"""# OpenAI Intent Detection"""

import requests


class OpenAIService:
  def __init__(self):
    print("================================ Initialize OpenAI Service ================================")
    self.chat_completion_url = "https://api.openai.com/v1/chat/completions"
    self.headers = {
        'Authorization': 'Bearer {}'.format(os.environ.get('OPENAI_API_KEY')),
        'Content-Type': 'application/json'
    }
    self.one_shot: str = "You are a text classifier and your task is to classify a given text in Khmer or English into the following categories: $CATEGORY_LIST. You should directly output only 1 predicted label from the categories with language code 'en' or 'km' separated by a comma ','. Your answer should be either one of $CATEGORY_LIST. If unsure, output 'none,en'. Do not output a sentence.\nGood example:\n###Input###: 'ខ្ញុំចង់ដឹងម៉ោង។'\n###Output###: 'time_now,km'\nGood example:\n###Input###: 'What is the temperature?'\n###Output###: 'weather_now,en'\nBad Example:\n###Input###: 'ប៉ុន្មានដឺក្រេថ្ងៃហ្នឹង?'\n###Output###: 'Weather_now,km'\nGood example:\n###Input###: 'នរណាជាអ្នកបង្កើតឯង?'\n###Output###: 'none,km'"
    print("===========================================================================================")

  async def categorize(self, categories: list[str], message: str) -> Optional[tuple]:
    language_code = 'en'
    if len(categories) > 0:
      print("Categories: ", str(categories), "Message: ", message)
      one_shot_prompt: str = self.one_shot.replace("$CATEGORY_LIST", str(categories))
      # print("One-shot Prompt: ", one_shot_prompt)
      data = {
          "model": "gpt-4-turbo",
          "messages": [
              {
                  "role": "system",
                  "content": one_shot_prompt
              },
              {
                  "role": "user",
                  "content": message
              }
          ]
      }
      response = requests.post(self.chat_completion_url, json=data, headers=self.headers)
      try:
        classified_text: str = response.json()['choices'][0]['message']['content']
        print("One-shot Response: ", classified_text)
        if classified_text.count(',') == 1:
          (intent, language_code) = (element.replace("'", '').strip() for element in classified_text.split(','))
          if intent != 'none':
            return (intent, language_code)
      except Exception as error:
        print("Error: {0} - {1}".format(error, response.json()['error']['message']))
        return ('none', 'en')

    generated_text: str = ""
    if language_code == 'km':
      generated_text = "សូមអភ័យទោស! ខ្ញុំមិនអាចឆ្លើយនូវសំណួរនេះបានទេ។"
    elif language_code == 'en':
      try:
        # Asking Generative AI...
        json = {
            "model": "gpt-3.5-turbo",
            "messages": [
                {
                    "role": "system",
                    "content": "You are a conversation chatbot. You answer as short as a natural speaking companion."
                },
                {
                    "role": "user",
                    "content": message
                }
            ]
        }
        response = requests.post(self.chat_completion_url, json=json, headers=self.headers)

        generated_text = response.json()['choices'][0]['message']['content']
        # print("Generated Response: ", generated_text)
      except Exception as error:
        print("Error: {0}".format(error))
        return ('none', 'en')

    return ('generated_response', (language_code, generated_text))

"""# Conversation Service"""

class ConversationService:
  def __init__(self, session_id: str):
    print("================================= Initialize Conversation =================================")
    self.session_service = SessionService(session_id=session_id)
    print("===========================================================================================")

  async def _post_processing(self, payload: dict):
    if payload['currentPageName'] == 'START_PAGE':
      if payload['type'] == 'from_iata':
        await self.session_service.update_session(current_page_name='FROM_IATA', parameters=payload.get('parameters'))

    elif payload['currentPageName'] == 'FROM_IATA':
      if payload['type'] == 'to_iata':
        await self.session_service.update_session(current_page_name='TO_IATA', parameters=payload.get('parameters'))

    elif payload['currentPageName'] == 'TO_IATA':
      if payload['type'] == 'date_departure':
        await self.session_service.update_session(current_page_name='DATE_DEPARTURE', parameters=payload.get('parameters'))

    elif payload['currentPageName'] == 'DATE_DEPARTURE':
      if payload['type'] == 'date_return':
        await self.session_service.update_session(current_page_name='DATE_RETURN', parameters=payload.get('parameters'))

    elif payload['currentPageName'] == 'DATE_RETURN':
      if payload['type'] == 'adults_infants':
        await self.session_service.update_session(current_page_name='ADULTS_INFANTS', parameters=payload.get('parameters'))

    elif payload['currentPageName'] == 'ADULTS_INFANTS':
      if payload['type'] == 'summary':
        await self.session_service.update_session(current_page_name='CONFIRM_OR_EDIT', parameters=payload.get('parameters'))

    elif payload['currentPageName'] == 'CONFIRM_OR_EDIT':
      if payload['type'] == 'success':
        await self.session_service.update_session(current_page_name='START_PAGE')
      elif payload['type'] == 'edit':
        await self.session_service.update_session(current_page_name='MAKE_CHANGE', parameters=payload.get('parameters'))

    if payload['type'] == 'cancel' or payload['type'] == 'end':
      await self.session_service.update_session(current_page_name='START_PAGE')
    elif payload['type'] == 'chat_me':
      await self.session_service.update_session(current_page_name='START_PAGE')

  async def converse(self, message: str) -> Optional[dict]:
    print("================================== Conversation Converse ==================================")
    helperService = HelperService()
    openAIService = OpenAIService()

    session_data = await self.session_service.get_session()
    if not session_data:
      self.session_service.add_session()

    session_data = await self.session_service.get_session()
    session: dict = session_data[0].to_dict();
    current_page_name: str = session['currentPageName']
    categories: list[str] = ['none', 'time_now', 'weather_now'] + HelperService.get_categories(page_name=current_page_name)

    user_intent = await openAIService.categorize(categories=categories, message=message)
    user_intent = helperService.intent_recognition(current_page_name=current_page_name, user_intent=user_intent, message=message, parameters=session.get('parameters', {}))
    print("===========================================================================================")

    payload = helperService.response(current_page_name=current_page_name, user_intent=user_intent)
    await self._post_processing(payload=payload)

    return payload

"""# Main Execution Function"""

async def main():
  conversationService = ConversationService(session_id='mnX2okZ0iGhJ5v2y1DaXfzJfIfV2')
  payload: Optional[dict] = await conversationService.converse(message="")
  print("Output:", payload)

  session: dict = (await conversationService.session_service.get_session())[0].to_dict();
  current_page_name: str = session['currentPageName']
  print("\n\nNext Categories:", ['none', 'time_now', 'weather_now'] + HelperService.get_categories(page_name=current_page_name))
  print("Next Question:\n", payload.get('message'))
  print("=================================== EXECUTION COMPLETED ===================================")

"""# Run"""

if __name__ == '__main__':
  try:
    await main()
  except Exception as error:
    print("Error:", error)